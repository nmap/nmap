local http = require "http"
local nmap = require "nmap"
local shortport = require "shortport"
local stdnse = require "stdnse"
local string = require "string"
local table = require "table"
local json = require "json"
local urlmod = require "url"

description = [[
Checks if hosts are on Google's blacklist of suspected malware and phishing
servers. These lists are constantly updated and are part of Google's Safe
Browsing service.

To do this the script queries the Google's Safe Browsing service and you need
to have your own API key to access Google's Safe Browsing Lookup services. Sign
up for yours at https://developers.google.com/safe-browsing/v4/get-started

* To learn more about Google's Safe Browsing:
https://developers.google.com/safe-browsing/

* To register and get your personal API key:
https://developers.google.com/safe-browsing/v4/get-started

* To make modifications to this file, use the following documentation:
https://developers.google.com/safe-browsing/v4/lookup-api
]]

---
-- @usage
-- nmap -p80 --script http-google-malware <host>
--
-- @output
-- PORT   STATE SERVICE
-- 80/tcp open  http
-- |_http-google-malware.nse: Host is known for distributing malware.
--
-- @args http-google-malware.url URL to check. Default: <code>http/https</code>://<code>host</code>
-- @args http-google-malware.api API key for Google's Safe Browsing Lookup service
---

author = "Paulino Calderon <calderon@websec.mx>"
license = "Same as Nmap--See https://nmap.org/book/man-legal.html"
categories = {"malware", "discovery", "safe", "external"}


portrule = shortport.http

---#########################
--ENTER YOUR API KEY HERE  #
---#########################
local APIKEY = ""
---#########################

--Builds Google Safe Browsing query
--@param apikey Api key
--@return Url
local function build_request_url(apikey)
  return string.format("https://safebrowsing.googleapis.com/v4/threatMatches:find?key=%s", apikey)
end

local function build_request_body(url)
  local body = {
    client = {
      clientId = "http-google-malware",
      clientVersion = "1.0"
    },
    threatInfo = {
      threatTypes = {"MALWARE", "SOCIAL_ENGINEERING"},
      platformTypes = {"WINDOWS"},
      threatEntryTypes = {"URL"},
      threatEntries = {
        { url = url }
      }
    }
  }
  return json.generate(body)
end

local function fail(err)
  return stdnse.format_output(false, err)
end

---
-- MAIN
---
action = function(host, port)
  local apikey = stdnse.get_script_args("http-google-malware.api") or APIKEY
  local malware_found = false
  local target
  local output_lns = {}

  if not(host.targetname) then
    target = host.ip
  else
    target = host.targetname
  end

  local target_url = stdnse.get_script_args("http-google-malware.url") or string.format("%s://%s", port.service, target)

  if string.len(apikey) < 25 then
    return fail(("No API key found. Use the %s.api argument"):format(_ENV.SCRIPT_NAME or "http-google-malware"))
  end

  stdnse.debug1("Checking host %s", target_url)
  local body = build_request_body(target_url)
  local url = build_request_url(apikey)

  local parsed_url = urlmod.parse(url)
  if not parsed_url or not parsed_url.host then
    return fail("Failed to parse request URL")
  end

  local response = http.generic_request({
    method = "POST",
    host = parsed_url.host,
    port = parsed_url.port or 443,
    path = parsed_url.path or "/v4/threatMatches:find",
    ssl = true,
    headers = {
      ["Content-Type"] = "application/json"
    },
    body = body
  })


  stdnse.debug2("POST %s\nPayload: %s", url, body)

  if not response then
    return fail("HTTP request failed (no response received)")
  end

  if response.status and response.status >= 400 then
    return fail("Request failed (invalid API key or format)")
  end

  if response.body and #response.body > 0 then
    if response.body:find("MALWARE") then
      output_lns[#output_lns + 1] = "Host is known for distributing malware."
      malware_found = true
    end
    if response.body:find("SOCIAL_ENGINEERING") then
      output_lns[#output_lns + 1] = "Host is known for being used in phishing attacks."
      malware_found = true
    end
  elseif nmap.verbosity() >= 2 and not malware_found then
    output_lns[#output_lns + 1] = "Host is safe to browse."
  end

  if #output_lns > 0 then
    return table.concat(output_lns, "\n")
  end
end
